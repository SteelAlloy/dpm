/*
 * Copyright (c) 2020 Â· Marton Lederer
 * This file was created / generated by Marton Lederer
 * See the LICENSE on the github repo
 * https://github.com/MartonDev
 * https://marton.lederer.hu
 */

import { Color, Style, IObject, IModule } from '../types.ts'

export class Uninstaller {

  private readonly moduleName: string
  private readonly depsDir: string

  constructor (moduleName: string, depsDir: string) {

    this.moduleName = moduleName
    this.depsDir = depsDir

  }

  /*
  *
  * Getting the repo for the module
  *
  * */
  async getRepoInfo (): Promise<IObject> {

    return new Promise<IObject>(async resolve => {

      const modules = await (await fetch('https://raw.githubusercontent.com/denoland/deno_website2/master/database.json')).json()

      if(!(this.moduleName in modules)) {

        console.log(`\n${ Color.Red }Could not fetch module from deno.land/x. Manual removal is needed${ Style.Reset }`)
        Deno.exit()

      }

      resolve(await (await fetch(`https://api.github.com/repos/${ modules[this.moduleName].owner }/${ modules[this.moduleName].repo }`)).json())

    })

  }

  /*
  *
  * Remove the module
  *
  * */
  async removeModule () {

    const
      moduleDir = `${ this.depsDir }/deno_modules`,
      repoInfo = await this.getRepoInfo(),
      importMapFile = await Deno.open(`${ moduleDir }/import_map.json`, { read: true }),
      importMap = JSON.parse(new TextDecoder().decode(await Deno.readAll(importMapFile))),
      depsFile = await Deno.open(`${ Deno.cwd() }/deps.json`, { read: true }),
      deps = JSON.parse(new TextDecoder().decode(await Deno.readAll(depsFile)))

    //TODO fix this
    await Deno.remove(`${ moduleDir }/${ repoInfo['name'] }/`)

    /*delete importMap.imports[`${ this.moduleName }/`]
    deps.modules.splice(deps.modules.indexOf(deps.modules.find((moduleItem: IModule) => moduleItem.module === this.moduleName)), 1)*/

    importMapFile.close()
    depsFile.close()

    /*await Deno.writeFile(`${ moduleDir }/import_map.json`, new TextEncoder().encode(JSON.stringify(importMap, null, 2)))
    await Deno.writeFile(`${ Deno.cwd() }/deps.json`, new TextEncoder().encode(JSON.stringify(deps, null, 2)))*/

  }

}