/**
 * Copyright (c) 2020 Â· Marton Lederer
 * This file was created / generated by Marton Lederer
 * See the LICENSE on the github repo
 * https://github.com/MartonDev
 * https://marton.lederer.hu
 */

import { Color, IModule, IObject, Style } from "../types.ts";

export class Installer {
  private readonly moduleName: string;
  private readonly depsDir: string;
  private readonly isAddToDeps: boolean;

  constructor(moduleName: string, depsDir: string, addToDeps: boolean) {
    this.moduleName = moduleName;
    this.depsDir = depsDir;
    this.isAddToDeps = addToDeps;
  }

  /** Getting repo info from github
   * @param repo The repo */
  async getRepoInfo(repo: string): Promise<IObject> {
    const data = await fetch(`https://api.github.com/repos/${repo}`);
    return data.json();
  }

  /** Getting repo releases list from github
   * @param repo The repo */
  async getReleasesForRepo(repo: string): Promise<IObject> {
    const data = await fetch(`https://api.github.com/repos/${repo}/releases`);
    return data.json();
  }

  /** Getting the repo for the module from GitHub */
  async moduleRepo(): Promise<string | null> {
    if (this.moduleName.includes("http")) {
      return null;
    }

    const data = await fetch(
      "https://raw.githubusercontent.com/denoland/deno_website2/master/database.json",
    );
    const modules = await data.json();

    if (this.moduleName in modules) {
    
      if (modules[this.moduleName].type !== "github") {
        console.log(
          `\n${Color.Red}Error while fetching: Module type is not github${Style.Reset}`,
        );
        return null;
      }

      return `${modules[this.moduleName].owner}/${
        modules[this.moduleName].repo
      }`;
    
    } else {
      return null;
    }
  }

  /** Adding to importmap */
  async addToImportMap(cloneRepo: string): Promise<boolean> {
    console.log(`Adding module to import map...`);

    try {
      const importMapFile = await Deno.open(
        `${Deno.cwd()}/deno_modules/import_map.json`,
        { read: true, write: true },
      );
      const importMap = JSON.parse(
        new TextDecoder().decode(await Deno.readAll(importMapFile)),
      );
      const repoInfo = await this.getRepoInfo(cloneRepo);

      importMap.imports[`${this.moduleName}/`] =
        `file://${Deno.cwd()}/deno_modules/${repoInfo["name"]}/`;
      importMapFile.close();

      await Deno.writeFile(
        `${Deno.cwd()}/deno_modules/import_map.json`,
        new TextEncoder().encode(JSON.stringify(importMap, null, 2)),
      );
      return true;
  
    } catch (err) {
      console.log(
        `\n${Color.Red}Error while adding to import map\n${err.message}${Style.Reset}`,
      );
      return false;
    }
  }

  /** Adding to dependency files */
  async addToDeps(cloneRepo: string): Promise<boolean> {
    try {
      const depsJSONFile = await Deno.open(
        `${Deno.cwd()}/deps.json`,
        { read: true },
      );
      const depsJSON = JSON.parse(
        new TextDecoder().decode(await Deno.readAll(depsJSONFile)),
      );
      const module: IModule = {
        module: this.moduleName,
        //TODO version
        version: "master",
        repo: cloneRepo,
      };

      //TODO version check
      //if the version is higher than the already installed one, update the package
      if (
        depsJSON.modules.find((module: IModule) =>
          module.module === this.moduleName
        ) && this.isAddToDeps
      ) {
        console.log(`\n${Color.Red}Module already installed${Style.Reset}`);
        Deno.exit();
      }

      depsJSON.modules.push(module);
      depsJSONFile.close();

      if (this.isAddToDeps) {
        await Deno.writeFile(
          `${Deno.cwd()}/deps.json`,
          new TextEncoder().encode(JSON.stringify(depsJSON, null, 2)),
        );
      }

      return true;
    } catch (err) {
      console.log(
        `\n${Color.Red}Error while adding to deps\n${err.message}${Style.Reset}`,
      );
      return false;
    }
  }

  async install() {
    let currentLog = `Installing ${this.moduleName}`;
    let loadingAnimationItems = ["\\", "|", "/", "-"];
    let i = 0;
    let loadingAnimation = setInterval(() => {
      Deno.stdout.write(
        new TextEncoder().encode(
          "\r" + loadingAnimationItems[i++] + currentLog,
        ),
      );
      i &= 3;
    }, 70);

    const cloneRepo = await this.moduleRepo();

    if (cloneRepo === null) {
      console.log(
        `\n${Color.Red}Error while installing: Module not found${Style.Reset}`,
      );
      Deno.exit();
    }

    currentLog = `Fetching from https://github.com/${cloneRepo}...`;

    const cloneTo = `${this.depsDir}${this.moduleName}`;
    const addingToDepsWasSuccessful = await this.addToDeps(cloneRepo);
    const addingToImportMapWasSuccessful = await this.addToImportMap(cloneRepo);

    if (!addingToDepsWasSuccessful || !addingToImportMapWasSuccessful) {
      Deno.exit();
    }

    currentLog = `Installing to: ${cloneTo}...`;

    const cloneProcess = Deno.run({
      cmd: ["git", "clone", `https://github.com/${cloneRepo}`],
      cwd: this.depsDir,
    });
    const status = await cloneProcess.status();

    clearInterval(loadingAnimation);

    if (status.success) {
      console.log(
        `\n${Color.Green}Installed module ${this.moduleName}.${Style.Reset}`,
      );
    } else if (status.code === 128) {
      console.log(
        `\n${Color.Red}Module is already installed, or the module repo is already cloned to deno_modules${Style.Reset}`,
      );
    } else {
      console.log(
        `\n${Color.Red}Something went wrong when cloning the module. Code: ${status.code}${Style.Reset}`,
      );
    }
  }
}
