/*
 * Copyright (c) 2020 Â· Marton Lederer
 * This file was created / generated by Marton Lederer
 * See the LICENSE on the github repo
 * https://github.com/MartonDev
 * https://marton.lederer.hu
 */

import { Color, Style } from '../types.ts'

export class Installer {

  private readonly moduleName: string
  private readonly depsDir: string

  constructor (moduleName: string, depsDir: string) {

    this.moduleName = moduleName
    this.depsDir = depsDir

  }

  async moduleRepo (): Promise<string | null> {

    return new Promise<string | null>(async resolve => {

      if(this.moduleName.includes('http'))
        resolve(null)

      const modules = await (await fetch('https://raw.githubusercontent.com/denoland/deno_website2/master/database.json')).json()

      if(this.moduleName in modules) {

        if(modules[this.moduleName].type !== 'github') {

          console.log(`${ Color.Red }Error while fetching: Module type is not github${ Style.Reset }`)
          resolve(null)

        }

        resolve(`${ modules[this.moduleName].owner }/${ modules[this.moduleName].repo }`)

      }
      else
        resolve(null)

    })

  }

  async install () {

    console.log(`Installing ${ this.moduleName }...`)

    const cloneRepo = await this.moduleRepo()

    if(cloneRepo === null) {

      console.log(`${ Color.Red }Error while installing: Module not found${ Style.Reset }`)
      return

    }

    console.log(`Fetching from https://github.com/${ cloneRepo }...`)

    const
      module = await fetch(`https://api.github.com/repos/${ cloneRepo }/contents/mod.ts`),
      cloneTo = `${ this.depsDir }${ this.moduleName }`

    if(module.status === 404) {

      console.log(`${ Color.Red }No mod.ts found at https://github.com/${ cloneRepo }/mod.ts\nmod.ts files are required, without a mod.ts the module is not supported by dpm${ Style.Reset }`)
      return

    }else if(module.status !== 200) {

      console.log(`${ Color.Red }Something went wrong while requesting the module. Status code: ${ module.status }${ Style.Reset }`)
      return

    }

    console.log(`Installing to: ${ cloneTo }...`)

    await Deno.run({

      cmd: ['git', 'clone', `https://github.com/${ cloneRepo }`],
      cwd: this.depsDir

    })

    //console.log(['git', 'clone', `https://github.com/${ cloneRepo }`, `${ cloneTo }/`].join(' '))

  }

}