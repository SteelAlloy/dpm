/*
 * Copyright (c) 2020 Â· Marton Lederer
 * This file was created / generated by Marton Lederer
 * See the LICENSE on the github repo
 * https://github.com/MartonDev
 * https://marton.lederer.hu
 */

import { BaseCommand } from '../../deps.ts'
import { Color, IProject, Style } from '../types.ts'
import Config from '../Config.ts'

export class InitCommand extends BaseCommand {

  constructor () {

    super()

    this.description('Initialize a dpm project')
      .action(async () => {

        await this.runCommand()

      })

  }

  async runCommand () {

    console.log(`Welcome to ${ Color.Cyan }dpm${ Style.Reset } setup.\nLet's create your ${ Style.Bright }project${ Style.Reset }!\n`)

    const
      projectData: IProject = {

        name: await this.listenForInput('Project name'),
        description: await this.listenForInput('Description'),
        version: await this.listenForInput('Version', '0.0.1'),
        author: await this.listenForInput('Author'),
        scripts: [],
        modules: [],
        git: await this.listenForInput('Git repository'),
        license: await this.listenForInput('License', 'ISC')

      },
      executeDir = Deno.cwd(),
      encoder = new TextEncoder(),
      modsFile = await Deno.open(`${ executeDir }/deps.json`, { write: true, create: true }),
      gitignoreFile = await Deno.open(`${ executeDir }/.gitignore`, { write: true, create: true, append: true })

    try {

      await Deno.writeAll(modsFile, encoder.encode(JSON.stringify(projectData, null, 2)))
      await Deno.writeAll(gitignoreFile, encoder.encode('\n# Deno modules\ndeno_modules/'))
      modsFile.close()
      gitignoreFile.close()

      await Deno.mkdir(`${ executeDir }/deno_modules`)

      const importMapFile = await Deno.open(`${ executeDir }/deno_modules/import_map.json`, { write: true, create: true })
      await Deno.writeAll(importMapFile, encoder.encode(JSON.stringify({ imports: {  } }, null, 2)))
      importMapFile.close()

      console.log(`${ Color.Green }Created Deno project${ Style.Reset }`)

    }catch (e) {

      console.log(`${ Color.Red }There was an error creating your project.\nA deno_modules directory might exist in ${ executeDir }\nPlease delete it and try again${ Style.Reset }`)

    }

  }

  async listenForInput (label: string, defaultVal: string = ''): Promise<string> {

    console.log(`${ label }${ defaultVal !== '' ? ` (${ defaultVal })` : '' }: `)

    return new Promise<string>(async resolve => {

      const
        buffer = new Uint8Array(1024),
        input = await Deno.stdin.read(buffer),
        inputVal = (new TextDecoder().decode(buffer.subarray(0, typeof input === 'number' ? input : 0))).replace(/\r?\n|\r/g, '')

      resolve(inputVal === '' ? defaultVal : inputVal)

    })

  }

}